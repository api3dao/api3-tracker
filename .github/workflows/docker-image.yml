name: Docker Image CI

on:
  push:
    branches: [ "main", "i/**", "f/**" ]
  pull_request:
    branches: [ "dependabot/**" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag api3tracker:latest
    - name: Build the Storybook Docker image
      run: docker build . --file .storybook/Dockerfile --tag api3tracker-storybook:latest
    - name: Save main image
      uses: actions/upload-artifact@v2
      with:
        name: api3tracker:latest
        path: /tmp/api3tracker.tar
    - name: Save storybook image
      uses: actions/upload-artifact@v2
      with:
        name: api3tracker-storybook:latest
        path: /tmp/api3tracker-storybook.tar
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }} 
        known_hosts: /dev/null
    - name: Check SSH access
      env:
         SSH_HOST: ${{ secrets.SSH_HOST }}
      run: docker image ls && ssh -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null $SSH_HOST 'docker image ls'
    - name: Download artifacts (Docker images) from build workflow
      uses: actions/download-artifact@v2
    - name: Push main Docker image
      env:
         SSH_HOST: ${{ secrets.SSH_HOST }}
      run: docker save api3tracker:latest | ssh -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null $SSH_HOST 'docker load'
    - name: Push storybook Docker image
      env:
         SSH_HOST: ${{ secrets.SSH_HOST }}
      run: docker save api3tracker-storybook:latest | ssh -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null $SSH_HOST 'docker load'
    - name: Apply Terraform plan
      env:
         SSH_HOST: ${{ secrets.SSH_HOST }}
         SSH_REMOTE_PATH: ${{ secrets.SSH_REMOTE_PATH }}
      run: |
         export REMOTE_CMD="cd $SSH_REMOTE_PATH && terraform init && terraform apply -auto-approve"
         ssh -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null bash -c '"'$REMOTE_CMD'"'
