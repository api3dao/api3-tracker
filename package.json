{
  "name": "api3-tracker",
  "version": "0.1.0",
  "node": ">=16.13.0",
  "license": "MIT",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:init": "docker rm -f pgapi3dao; docker run --name pgapi3dao -e POSTGRES_DB=api3dao -e POSTGRES_PASSWORD=test -d -p5432:5432 postgres -c maintenance_work_mem=1GB && sleep 3 && yarn prisma migrate dev",
    "db:restore": "docker rm -f pgapi3dao; docker run --name pgapi3dao -e POSTGRES_DB=api3dao -e POSTGRES_PASSWORD=test -d -p5432:5432 postgres -c maintenance_work_mem=1GB && sleep 5 && (cat pgapi3dao.sql.gz | gzip -d - | docker exec -i pgapi3dao psql -U postgres -h 127.0.0.1 -d api3dao)",
    "db:shell": "docker exec -it pgapi3dao psql -U postgres -h 127.0.0.1 api3dao",
    "db:status": "docker exec -it pgapi3dao psql -U postgres -h 127.0.0.1 api3dao -c 'select * from sync_status order by id'",
    "db:rm": "docker rm -f pgapi3dao",
    "db:dump": "(docker exec -i pgapi3dao pg_dump --no-owner --format plain --clean --if-exists -U postgres -h 127.0.0.1 api3dao > pgapi3dao.sql) && find . -name pgapi3dao.sql.gz -delete && gzip pgapi3dao.sql",
    "db:upload": "cat pgapi3dao.sql.gz | gzip -d - | docker exec -i $(docker ps -q --filter label=role=postgres --filter label=project=api3tracker)  sh -c 'psql -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1'",
    "cache:dump": "(docker exec -i pgapi3dao pg_dump --no-owner --format plain --clean --if-exists --table sync_status --table cache_votings --table cache_blocks --table cache_ens --table cache_user_shares --table cache_total_shares --table cache_logs --table cache_receipts --table cache_tx -U postgres -h 127.0.0.1 api3dao > cache.sql) && (echo '\nUPDATE public.sync_status SET processed = 0;\n ' >> cache.sql) && find . -name cache.sql.gz -delete && gzip cache.sql",
    "cache:restore": "cat cache.sql.gz | gzip -d - | docker exec -i pgapi3dao psql -U postgres -h 127.0.0.1 -d api3dao",
    "format": "prettier --write \"./**/*.{ts,tsx,js,jsx,css,scss,md,json,prisma}\" --loglevel silent",
    "format:check": "prettier --check \"./**/*.{ts,tsx,js,jsx,css,scss,md,json,prisma}\" --loglevel debug",
    "state:reset": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts state reset",
    "state:next": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts state next",
    "state:update": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts state update",
    "state:unlogged": "docker exec -i pgapi3dao psql -U postgres -h 127.0.0.1 -d api3dao -c 'ALTER TABLE \"member_delegations\" SET UNLOGGED; ALTER TABLE \"member_events\" SET UNLOGGED; ALTER TABLE \"member_epochs\" SET UNLOGGED; ALTER TABLE \"voting_event\" SET UNLOGGED; ALTER TABLE \"voting\" SET UNLOGGED; ALTER TABLE \"members\" SET UNLOGGED; ALTER TABLE \"epochs\" SET UNLOGGED';",
    "ens:reset": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts ens reset",
    "ens:import": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts ens import",
    "ens:download": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts ens download",
    "logs:reset": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts logs reset",
    "logs:download": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts logs download",
    "shares:reset": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts shares reset",
    "shares:download": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts shares download",
    "supply:reset": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts supply reset",
    "supply:download": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts supply download",
    "treasuries:reset": "TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts treasuries reset",
    "treasuries:download": "API3TRACKER_ENDPOINT=${API3TRACKER_ENDPOINT:-`chainstate --endpoints -t alchemy,mainnet`} TS_NODE_PROJECT=./tsconfig.cli.json yarn ts-node cli.ts treasuries download",
    "rm-dev": "cat package.json | grep -v story | grep -v prettier > package.backup.json && mv package.backup.json package.json",
    "prepare": "husky install"
  },
  "dependencies": {
    "@next-auth/prisma-adapter": "1.0.5",
    "@prisma/client": "^4.7.1",
    "@types/js-yaml": "4.0.5",
    "assert": "2.0.0",
    "axios": "0.27.2",
    "buffer": "6.0.3",
    "csv-stringify": "6.2.2",
    "ethers": "5.7.2",
    "js-yaml": "4.1.0",
    "next": "13.0.5",
    "next-auth": "4.17.0",
    "nprogress": "0.2.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-infinite-scroller": "1.2.6",
    "stream-browserify": "3.0.0",
    "superjson": "1.11.0",
    "swr": "1.3.0",
    "yargs": "17.6.2"
  },
  "devDependencies": {
    "@babel/core": "7.20.2",
    "@types/node": "18.0.0",
    "@types/nprogress": "0.2.0",
    "@types/react": "18.0.14",
    "@types/react-dom": "18.0.5",
    "@types/react-infinite-scroller": "1.2.3",
    "@types/yargs": "17.0.14",
    "autoprefixer": "10.4.13",
    "babel-loader": "8.3.0",
    "eslint": "8.17.0",
    "eslint-config-next": "12.1.6",
    "husky": "8.0.2",
    "postcss": "8.4.19",
    "postcss-cli": "10.0.0",
    "postcss-loader": "7.0.1",
    "prettier": "2.8.0",
    "prettier-plugin-prisma": "3.14.0",
    "prisma": "^4.7.1",
    "tailwindcss": "3.2.4",
    "ts-node": "10.9.1",
    "typescript": "4.9.3"
  },
  "resolutions": {
    "webpack": "^5"
  }
}
