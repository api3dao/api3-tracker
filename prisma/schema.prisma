// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Epoch {
  epoch         Int      @id // ID of epoch, PK
  createdAt     DateTime // date of epoch event
  blockNumber   Int // Block number of the epoch
  chainId       Int // Chain ID
  txHash        Bytes // Transaction hash
  apr           Decimal  @db.Decimal(10, 2) // APR during this epoch
  rewardsPct    Decimal  @db.Decimal(10, 4) // real epoch rewards (calculated from APR)
  newApr           Decimal  @default(0.0) @db.Decimal(10, 2) // APR for the next epoch
  newRewardsPct    Decimal  @default(0.0) @db.Decimal(10, 4) // real new epoch rewards (calculated from APR)
  members       Int // Number of members
  totalStake    Decimal  @db.Decimal(60, 18) // Total stake
  totalShares   Decimal  @db.Decimal(60, 18) // Total shares
  mintedShares  Decimal  @db.Decimal(60, 18) // # of minted tokens
  releaseDate   DateTime // Date when minted tokens will be released
  isCurrent     Int // whether this epoch is current
  isReleased    Int @default(0) // whether rewards of the epoch are released
  stakedRewards Decimal  @db.Decimal(60, 18) // total staked rewards at the moment of the epoch

  totalDeposits    Decimal @default(0.0) @db.Decimal(60, 18) // total deposits of the user at the moment of this epoch
  totalWithdrawals Decimal @default(0.0) @db.Decimal(60, 18) // total withdrawals of the user at the moment of this epoch
  totalUnlocked    Decimal @default(0.0) @db.Decimal(60, 18) // total unlocked rewards of the user at the moment of this epoch
  totalLocked      Decimal @default(0.0) @db.Decimal(60, 18) // total locked rewards of the user at the moment of this epoch

  @@map("epochs")
}

model MemberEpoch {
  epoch   Int // relation scalar field
  address Bytes // relation scalar field
  // member  Member @relation(name: "memberEpochs", fields: [address], references: [address])

  userShare       Decimal @db.Decimal(60, 18) // number of user shares at the moment of this epoch
  userStake       Decimal @db.Decimal(60, 18) // number of user stake at the moment of this epoch
  userVotingPower Decimal @db.Decimal(10, 2) // user voting power at this epoch
  userReward      Decimal @db.Decimal(60, 18) // user reward for this epoch
  isReleased      Int     @default(0) // whether rewards of these epochs are released

  userTotalDeposits    Decimal @default(0.0) @db.Decimal(60, 18) // total deposits of the user at the moment of this epoch
  userTotalWithdrawals Decimal @default(0.0) @db.Decimal(60, 18) // total withdrawals of the user at the moment of this epoch
  userTotalUnlocked    Decimal @default(0.0) @db.Decimal(60, 18) // total unlocked rewards of the user at the moment of this epoch
  userTotalLocked      Decimal @default(0.0) @db.Decimal(60, 18) // total locked rewards of the user at the moment of this epoch

  @@id([epoch, address])
  @@map("member_epochs")
}

model MemberEvent {
  id          String   @id // Combined ID of event
  createdAt   DateTime // Date of Event Transaction (taken from the block)
  address     Bytes // Address of the member to whom this transaction is related to
  //  member      Member   @relation(name: "memberEvents", fields: [address], references: [address])
  chainId     Int // Chain ID
  txHash      Bytes // Transaction hash
  blockNumber Int // Block Number
  txIndex     Int // Transaction Index inside the block
  logIndex    Int // Index inside the events logs of this transaction
  eventName   String // name of the event (based on the signature)
  data        Json? // data of the event
  fee         BigInt? // fee that was taken on this transaction
  gasPrice    BigInt? // gas price of this transaction
  gasUsed     BigInt? // gas used for this transaction
  feeUsd      Decimal? @db.Decimal(10, 2) // USD equivalent of the fee

  @@map("member_events")
}

model MemberDelegation {
  from       Bytes    @id // delegation is identified by who is delegating
  // memberFrom Member   @relation(name: "delegatesTo", fields: [from], references: [address])
  to         Bytes
  // memberTo   Member   @relation(name: "delegated", fields: [to], references: [address])
  updatedAt  DateTime @default(now()) // time of the last delegation update
  userShares Decimal  @db.Decimal(60, 18) // number of delegated shares

  @@map("member_delegations")
}

model Member {
  address    Bytes    @unique
  ensName    String // ENS domain name
  ensUpdated DateTime // END updated

  badges String // comma-separated badges for this member

  userShare        Decimal @db.Decimal(60, 18) // number of user shares at the moment of this epoch
  userStake        Decimal @db.Decimal(60, 18) // number of user stake at the moment of this epoch
  userVotingPower  Decimal @db.Decimal(10, 2) // user voting power at this epoch
  userReward       Decimal @db.Decimal(60, 18) // user reqard for this epoch
  userLockedReward Decimal @db.Decimal(60, 18) // how much of the reward is still locked
  userDelegates    Decimal @default(0.0) @db.Decimal(60, 18) // how much user delegates
  userIsDelegated  Decimal @default(0.0) @db.Decimal(60, 18) // how much user is delegated
  userDeposited    Decimal @db.Decimal(60, 18) // total user deposited over the time
  userWithdrew     Decimal @db.Decimal(60, 18) // total user withdrew over the time

  createdAt DateTime @default(now()) // date of the first event with this address
  updatedAt DateTime @default(now()) // date of the last update with this address
  tags      String // field for a full text search, indexes can't be defined here for Postgres and should be defined in database directly

  // epochs      MemberEpoch[]      @relation("memberEpochs") // relations to epochs
  // events      MemberEvent[]      @relation("memberEvents") // relations to events
  // votings     VotingEvent[]      @relation("votingMember") // relation to votes
  // delegatesTo MemberDelegation?  @relation("delegatesTo") // relation to delegations OF this member
  // delegates   MemberDelegation[] @relation("delegated") // relation to delegations TO this member

  @@map("members")
}

enum VotingType {
  PRIMARY
  SECONDARY
}

model VotingEvent {
  id        String   @id // Combined ID of event
  createdAt DateTime // Date of Event Transaction (taken from the block)

  chainId     Int // Chain ID
  txHash      Bytes // Transaction hash
  blockNumber Int // Block Number
  txIndex     Int // Transaction Index inside the block
  logIndex    Int // Index inside the events logs of this transaction
  eventName   String // name of the event (based on the signature)
  data        Json? // data of the event
  fee         BigInt? // fee that was taken on this transaction
  gasPrice    BigInt? // gas price of this transaction
  gasUsed     BigInt? // gas used for this transaction
  feeUsd      Decimal? @db.Decimal(10, 2) // USD equivalent of the fee

  address Bytes // Address of the member to whom this transaction is related to
  // member  Member @relation(name: "votingMember", fields: [address], references: [address])

  supports        Int     @default(0) // -1 - against, 1 - supports, 0 - unrelated
  userShare       Decimal @db.Decimal(60, 18) // number of user shares at the moment of this voting
  userVotingPower Decimal @db.Decimal(10, 2) // user voting power at the moment of this voting

  votingId String?
  voting   Voting? @relation(name: "votingEvents", fields: [votingId], references: [id])

  @@map("voting_event")
}

model Voting {
  id        String     @id // ID of the voting
  vt        VotingType // Voting Type
  createdAt DateTime // Date of Voting Creation Transaction (taken from the block)
  name      String // name of the voting
  status    String // status of the voting

  transferValue   Decimal? @db.Decimal(60, 18) // in case of transfer - value of the token for transfer
  transferToken   String? // in case of transfer - name of the token for transfer
  transferAddress Bytes? // in case of transfer - address of the destination

  totalGasUsed BigInt? // total gas price of this voting
  totalUsd     Decimal? @db.Decimal(10, 2) // total USD estimate for gas

  totalFor      Decimal @db.Decimal(60, 18)
  totalAgainst  Decimal @db.Decimal(60, 18)
  totalStaked   Decimal @db.Decimal(60, 18)
  totalRequired Decimal @db.Decimal(60, 18)

  events VotingEvent[] @relation("votingEvents") // relations to events

  @@map("voting")
}

model PriceEthereum {
  ts  DateTime @id
  usd Decimal  @db.Decimal(10, 2)
  eur Decimal  @db.Decimal(10, 2)
  rub Decimal  @db.Decimal(10, 2)
  cny Decimal  @db.Decimal(10, 2)
  cad Decimal  @db.Decimal(10, 2)
  jpy Decimal  @db.Decimal(10, 2)
  gbp Decimal  @db.Decimal(10, 2)

  @@map("price_ethereum")
}

enum TreasuryType {
  PRIMARY
  SECONDARY
  V1
}

model Treasury {
  ts           DateTime
  ttype        TreasuryType
  address      Bytes
  token        String
  tokenAddress Bytes
  value        Decimal      @db.Decimal(60, 18)
  current      Int          @default(0)

  @@id([ts, ttype, token])
  @@map("treasuries")
}

model Api3Supply {
  ts                DateTime @id
  blockNumber       BigInt
  circulatingSupply Decimal  @db.Decimal(60, 18)

  totalLocked   Decimal @db.Decimal(60, 18)
  totalStaked   Decimal @db.Decimal(60, 18)
  stakingTarget Decimal @db.Decimal(60, 18)

  lockedByGovernance Decimal @db.Decimal(60, 18)
  lockedVestings     Decimal @db.Decimal(60, 18)
  lockedRewards      Decimal @db.Decimal(60, 18)
  timeLocked         Decimal @db.Decimal(60, 18)

  @@map("api3_supply")
}

model CacheBlock {
  hash      Bytes // Hash of the block
  height    BigInt // Height of the Block
  data      Json // JSON Data of the block
  createdAt DateTime // Date of the block
  price     Decimal  @db.Decimal(10, 2) // Ethereum Price at the time of the block

  @@id([hash])
  @@map("cache_blocks")
}

model CacheTx {
  hash Bytes // Hash of the transaction
  data Json // JSON Data of the transaction

  @@id([hash])
  @@map("cache_tx")
}

model CacheReceipt {
  hash    Bytes // Hash of the transaction
  receipt Json // JSON Data of the receipt

  @@id([hash])
  @@map("cache_receipts")
}

model CacheLogs {
  hash     Bytes // Hash of the block
  contract Bytes // Address of the contract
  logs     Json // JSON Data: array of logs

  @@id([hash, contract])
  @@map("cache_logs")
}

model CacheEns {
  address   Bytes // Address of the member
  createdAt DateTime // Date of record creation
  name      String // ENS name that was set to this address

  @@id([address])
  @@map("cache_ens")
}

model CacheVoting {
  hash Bytes // Hash of the transaction
  data Json // JSON Data of the voting getStaticData

  @@id([hash])
  @@map("cache_votings")
}

model SyncStatus {
  id         Int // ID (always 1, this table should have just one record)
  updatedAt  DateTime // Date of the status update
  downloaded Int      @default(0) // The last downloaded block
  processed  Int      @default(0) // The last processed block

  @@id([id])
  @@map("sync_status")
}
